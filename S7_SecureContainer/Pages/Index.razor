@using Docker.DotNet
@using Docker.DotNet.Models;
@inject DockerService docker
@inject IJSRuntime jsRuntime
@inject IToastService toastService
@inject NavigationManager nav


<div class="card">
    <div class="card-body">
        <EditForm Model="@Model" OnSubmit="@Submit">
            <div class="mb-3 text-center">
                <label for="ConnectionString" class="form-label">Docker Host URL</label>
                <InputText class="form-control" id="ConnectionString" @bind-Value="Model!.ConnectionString" />
            </div>
            <div class="d-grid gap-2 mt-3">
                @if (IsRefreshing)
                {
                    <button class="btn btn-primary" type="button" disabled>
                        <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                        <span role="status"></span>
                    </button>
                }
                else
                {
                    <button class="btn btn-primary" type="submit">Connect & Run</button>
                }
                <button class="btn btn-outline-secondary text-white" @onclick="(() => {onClear.InvokeAsync(); Model.ConnectionString = String.Empty;})" type="button">Clear</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    public DockerConnectionHost Model { get; set; } = new();
    [Parameter]
    public EventCallback onSubmit { get; set; }
    [Parameter]
    public EventCallback onClear { get; set; }
    [Parameter]
    public bool IsRefreshing { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Model.ConnectionString = docker.ConnectionString;
        }
    }

    private async Task Submit()
    {
        List<ToastModel> toasts = await docker.Connect(Model.ConnectionString);
        toasts.ForEach(t => toastService.ShowToast(t.Level, t.Message));
        if (toasts.Count(t => t.Level == ToastLevel.Error) == 0)
        {
            await onSubmit.InvokeAsync();
            StateHasChanged();
        }
    }

    public class DockerConnectionHost
    {
        public string ConnectionString { get; set; } = "";
    }
}