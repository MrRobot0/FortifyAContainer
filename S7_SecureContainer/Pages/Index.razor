@using Docker.DotNet
@using Docker.DotNet.Models;
@inject DockerService docker
@inject IJSRuntime jsRuntime
@inject IToastService toastService
@inject NavigationManager nav

<div class="card">
    <div class="card-body">
        <EditForm Model="@Model" OnSubmit="@Submit">
            <div class="mb-3 text-center">
                <label for="ConnectionString" class="form-label">Docker Host URL</label>
                <InputText class="form-control" id="ConnectionString" @bind-Value="Model!.ConnectionString" />
            </div>
            <div class="d-grid gap-2 mt-3">
                <button class="btn btn-primary" type="submit">Submit</button>
                <button class="btn btn-outline-secondary text-white" @onclick="(() => {onClear.InvokeAsync(); Model.ConnectionString = String.Empty;})" type="button">Clear</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    public string URI { get; set; } = "/";
    public DockerConnectionHost Model { get; set; } = new();
    [Parameter]
    public EventCallback onSubmit { get; set; }
    [Parameter]
    public EventCallback onClear { get; set; }

    protected override void OnInitialized()
    {
        Model.ConnectionString = docker.ConnectionString;
    }

    private async Task Submit()
    {
        DockerClient client;
        try
        {
            client = new DockerClientConfiguration(
            new Uri(Model.ConnectionString))
                .CreateClient();
            IList<ContainerListResponse> containers = await client.Containers.ListContainersAsync(
            new ContainersListParameters()
            {
                Limit = 1,
            });
            if (containers.Count == 0)
            {
                toastService.ShowToast(ToastLevel.Error, "No containers found!");
                return;
            }
        }
        catch (Exception)
        {
            toastService.ShowToast(ToastLevel.Error, "Could not connect to server url: " + Model.ConnectionString);
            return;
        }

        docker.ConnectionString = Model.ConnectionString;
        docker.Client = client;
        await onSubmit.InvokeAsync();
    }

    public class DockerConnectionHost
    {
        public string ConnectionString { get; set; } = "";
    }
}